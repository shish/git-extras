#!/usr/bin/python

"""
When run from a git-controlled folder, will print a list of statuses, eg:

branch                           master  develop
~~~~~~                           ~~~~~~  ~~~~~~~
mergable                          clean    clean    <-- this branch is fine, but not merged yet
merged_feature                    clean   merged    <-- this branch is already merged, it can probably be deleted now
conflict_feature                  clean conflict    <-- merged_feature and conflict_feature both modified the same code

also gives JSON output with --display=json
"""

import sys
import argparse
import json
import subprocess
from dogpile.cache import make_region


status_cache = make_region().configure(
    'dogpile.cache.dbm',
    arguments={"filename": "/tmp/git-merge-status.cache"},
    expiration_time=60*60,
#    'dogpile.cache.memcached',
#    arguments={"url": "localhost:11211"}
)


def system(cmd, cached=False):
    stdout = None
    if cached:
        stdout = status_cache.get("cmd:" + cmd)
    if not stdout:
        proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        stdout, stderr = proc.communicate()
        stdout = stdout.strip()
        status_cache.set("cmd:" + cmd, stdout)
    return stdout


def lines(cmd, strip=None):
    return [l.strip(strip) for l in system(cmd).split("\n")]


refs = {}

for line in lines("git show-ref --heads"):
    hash, ref = line.split()
    ref = ref.replace("refs/heads/", "")
    refs[ref] = hash


def ref_parse(ref):
    return refs[ref]


def get_status(branch, root):
    branch_rev = ref_parse(branch)
    root_rev = ref_parse(root)
    base_rev = system("git merge-base %s %s" % (root_rev, branch_rev), cached=True)

    if base_rev == branch_rev:
        return "merged"
    elif base_rev == root_rev:
        return "clean"  # fast-forward
    else:
        cache_key = "merge-base:%s-%s" % (root_rev, branch_rev)

        status = status_cache.get(cache_key)

        if not status:
            merge = system("git merge-tree %s %s %s" % (base_rev, root, branch), cached=False)
            if "changed in both" in merge:
                if "<<<<<" in merge:
                    status = "conflict"
                else:
                    status = "clean"  # two separate modifications to same file
            else:
                status = "clean"
            status_cache.set(cache_key, status)

        return status


def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("--display", default="human")
    parser.add_argument("--branches", default=",".join([l for l in lines("git branch", "* \n") if l]))
    parser.add_argument("--bases", default="master,develop")
    args = parser.parse_args(args)

    bases = args.bases.split(",")
    forks = args.branches.split(",")

    if args.display == "human":
        print "%-50s" % "branch",
        for base in bases:
            print "%8s" % base,
        print

        print "%-50s" % "~~~~~~",
        for base in bases:
            print "%8s" % ("~"*len(base)),
        print

        for branch in forks:
            print "%-50s" % branch,
            for base in bases:
                print "%8s" % get_status(branch, base),
            print

    if args.display == "json":
        stats = {}
        for branch in forks:
            if branch in bases:
                continue
            stats[branch] = {}
            for base in bases:
                if base in refs:
                    stats[branch][base] = get_status(branch, base)
                else:
                    stats[branch][base] = "merged"
        print json.dumps(stats, indent=4)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
